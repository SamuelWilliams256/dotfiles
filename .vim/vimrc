"TODO: Make vim respect the XDG standard: https://tlvince.com/vim-respect-xdg
"TODO: Make client server alias not put vim terminal into normal mode when opening new tab.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Vim Settings                                  "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Needs to be before 'set fileformats' or this will overwrite it.
set nocompatible

syntax on
filetype plugin indent on
colorscheme slate

set backspace=indent,eol,start
set belloff=all
set clipboard=unnamedplus "On Windows it's `set clipboard=unnamed`
set confirm
call mkdir($HOME . "/.vim/swap", "p", 0700)
set directory=~/.vim/swap/,.
set fileformats=unix,dos,mac
set history=1000
set incsearch
set list
set listchars=precedes:<,extends:>,tab:\ \ ,trail:_
set mouse=a
set noequalalways
set nohidden
set nowrap
set scrolloff=0
set showcmd
set showbreak=...
set sidescroll=1
set t_Co=256
set tags=tags;
set ttimeout
set ttimeoutlen=100

"Tabs
set autoindent
set breakindent
set copyindent
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

"Wildmenu
set wildignorecase
set wildmenu
set wildmode=longest:full,full

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                   Settings applied to both Vim and Netrw                     "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set splitright
let g:netrw_altv=1

set splitbelow
let g:netrw_alto=1

set number
let g:netrw_bufsettings='noma nomod number nobl nowrap ro' "All but 'number' are default

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Netrw Settings                                 "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:netrw_banner=0
let g:netrw_liststyle=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Keybinds                                   "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = " "

"Normal, Visual, Select, Operator-pending Modes

   "- to edit directory of current file
   noremap <silent> - :e %:p:h<CR>

   "Don't want to :set ignorecase because * and # should be case-sensitive
   "Case-insensitive search
   noremap / /\c
   noremap ? ?\c
   "Case-sensitive search
   noremap <Leader>/ /
   noremap <Leader>? /

   "Search currently open file and open quickfix list
   noremap <Leader>f :vimgrep /\c/ % \| copen<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
   noremap <Leader>F :vimgrep // % \| copen<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

   "Open terminal in current window
   noremap <Leader>t :ter ++curwin<CR>

"Insert Mode

   "shift-tab to inverse tab
   inoremap <S-Tab> <C-d>

"Other

   "Some terminals intercept these keystrokes, so if these mappings don't work,
   "check the terminal settings.
   nnoremap <silent> <C-Tab> :tabn<CR>
   nnoremap <silent> <C-S-Tab> :tabp<CR>
   nnoremap <silent> <C-S-t> :tabnew<CR>
   tnoremap <silent> <C-Tab> <C-w>:tabn<CR>
   tnoremap <silent> <C-S-Tab> <C-w>:tabp<CR>
   tnoremap <silent> <C-S-t> <C-w>:tabnew<CR>
" TODO bind in visual mode too

function! s:handle_curdir_command(commands)
   "See h: filename-modifiers
   let directory_of_buffer = expand("%:p")
   if directory_of_buffer == ""
      let directory_of_buffer = getcwd()
   endif
   if (!isdirectory(directory_of_buffer))
      let directory_of_buffewr = expand("%:p:h")
   endif

   let original_directory = getcwd()
   execute "cd" directory_of_buffer
   execute a:commands
   execute "cd" original_directory
endfunction

command -nargs=+ Curdir call <SID>handle_curdir_command(<q-args>)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 StatusLine                                   "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2        "set statusline visibility to 'always'

set statusline=         "clear entire statusline
set statusline+=%n      "buffer number
set statusline+=\       "space
set statusline+=%{&ff}  "file format where EOL is: dos = <CR><NL>, unix = <NL>, mac = <CR>
set statusline+=\       "space
set statusline+=%y      "file type
set statusline+=\       "space
set statusline+=%F      "full filepath
set statusline+=%=      "separation point between left and right aligned items
set statusline+=%m      "modified flag where: [+] = modified, [-] = unmodifiable
set statusline+=\       "space
set statusline+=L:      "L:
set statusline+=%l      "current line
set statusline+=/       "/
set statusline+=%L      "total lines
set statusline+=\       "space
set statusline+=C:      "C:
set statusline+=%v      "column number
set statusline+=\       "space

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Highlighting                                  "
"                             Auto-(no)hlsearch                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Turn off search highlighting once done searching

let g:enter_was_pressed = 0

function! s:handle_cursor_moved()
   if &hlsearch == 0 "See :h expr-option
      return
   endif

   let last_search = @/
   let cursor_pos = [line("."), col(".")]
   "Limit search to current line, starting with character under cursor
   let pos_of_next_match = searchpos(last_search, "cnz", cursor_pos[0])
   if cursor_pos != pos_of_next_match
      set nohlsearch
   endif
endfunction

function! s:handle_cmdline_leave()
   if (!g:enter_was_pressed)
      set nohlsearch
   else
      let g:enter_was_pressed = 0
      set hlsearch
   endif
endfunction

function! s:handle_enter_pressed_in_cmdline()
   let g:enter_was_pressed = 1
   return "\<CR>"
endfunction

"See :h cmdwin-char and :h file-pattern. Maps to ? and / searches.
autocmd! CmdlineChanged [\/\?] set hlsearch
autocmd! CmdlineLeave [\/\?] call <SID>handle_cmdline_leave()
autocmd! CmdwinEnter [\/\?] nnoremap <CR> :let g:enter_was_pressed = 1<CR><CR>
autocmd! CmdwinLeave [\/\?] nunmap <CR>
autocmd! CursorMoved * call <SID>handle_cursor_moved()
autocmd! InsertEnter * set nohlsearch

cnoremap <silent><expr> <CR> <SID>handle_enter_pressed_in_cmdline()

noremap <silent> n n:set hlsearch<CR>
noremap <silent> N N:set hlsearch<CR>
noremap <silent> * *:set hlsearch<CR>
noremap <silent> # #:set hlsearch<CR>
noremap <silent> g* g*:set hlsearch<CR>
noremap <silent> g# g#:set hlsearch<CR>
noremap <silent> gd gd:set hlsearch<CR>
noremap <silent> gD gD:set hlsearch<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Gvim Settings                                  "
"                   (only aplies if using Gvim obviously)                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TODO: Should we move this to .gvimrc?

set guifont=Hack\ 14 "TODO: Can list more fonts here in case Hack isn't available.
set guioptions-=m "Hide menu bar
set guioptions-=r "Hide scrollbar
set guioptions-=T "Hide toolbar

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Plugins                                     "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Built-in gdb debugging tool
packadd termdebug

"Auto-install vim-plug when launching vim if it's not already installed
"From https://github.com/junegunn/vim-plug/wiki/tips
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } "The install function call ensures that the plugin bin directory is populated.
    Plug 'junegunn/fzf.vim'
    Plug 'tpope/vim-fugitive'
call plug#end()

